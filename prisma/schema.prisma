// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model User {
//   id            String     @id @default(cuid())
//   name          String?
//   email         String?    @unique
//   emailVerified DateTime?
//   role          Role?
//   image         String?
//   accounts      Account[]
//   sessions      Session[]
//   createdAt     DateTime   @default(now())
//   updatedAt     DateTime   @updatedAt
//   tutorial      Tutorial[]
// }

enum Role {
  USER
  ADMIN
}

model Tutorial {
  id           Int            @id @default(autoincrement())
  title        String
  videoUrl     String
  description  String
  links        Link[]
  price        Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  UserTutorial UserTutorial[]
}

model Link {
  id         Int      @id @default(autoincrement())
  title      String
  url        String
  tutorial   Tutorial @relation(fields: [tutorialId], references: [id])
  tutorialId Int
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  role          Role?
  image         String?
  stripeAccount StripeAccount? // Only Adminâ€™s Stripe account
  accounts      Account[]
  sessions      Session[]
  payments      Payment[] // Payments made by the user
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  tutorials     Tutorial[]
  UserTutorial  UserTutorial[]
}

model StripeAccount {
  id              String   @id @default(cuid())
  stripeAccountId String   @unique
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  connected       Boolean  @default(false) // Indicates if the Stripe account is connected
  createdAt       DateTime @default(now())
}

model Payment {
  id              String        @id @default(cuid())
  stripePaymentId String        @unique
  userId          String // Refers to the user who made the payment
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount          Int // Payment amount in cents (Stripe uses cents)
  currency        String        @default("USD")
  status          PaymentStatus
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  NO_PAYMENT_REQUIRED // Add this line if it doesn't exist
}


model UserTutorial {
  id          String   @id @default(cuid())
  userId      String
  tutorialId  Int
  purchasedAt DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tutorial Tutorial @relation(fields: [tutorialId], references: [id], onDelete: Cascade)

  @@unique([userId, tutorialId]) // Ensure a user can purchase a tutorial only once
}
